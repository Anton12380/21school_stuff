1
00:00:06,070 --> 00:00:08,494
Welcome to the bonus part of the day.

2
00:00:08,504 --> 00:00:12,120
This part isn't mandatory for today's exercises.

3
00:00:12,120 --> 00:00:15,610
But it'll be useful for your career as a developer.

4
00:00:15,610 --> 00:00:18,110
And for the rest of the bootcamp too.

5
00:00:18,770 --> 00:00:22,060
So earlier we talked about standard output

6
00:00:22,060 --> 00:00:23,920
Actually, it isn't 100% accurate...

7
00:00:23,927 --> 00:00:27,781
There are two types of outputs : standard output, and standard error.

8
00:00:27,781 --> 00:00:31,839
So using our favorite example : "cat file.txt"

9
00:00:31,839 --> 00:00:37,084
Everything went fine, the file's content is displayed on the standard output.

10
00:00:37,084 --> 00:00:41,438
However, if try doing "cat" on a file that doesn't exist,

11
00:00:41,438 --> 00:00:48,050
it'll display a message on the error output.

12
00:00:48,050 --> 00:00:54,467
Let's say I do a "cat file.txt | rev"

13
00:00:54,467 --> 00:00:56,976
The file's being displayed in reverse.

14
00:00:56,976 --> 00:01:04,885
Which means the file's content has been displayed on the standard output.

15
00:01:04,885 --> 00:01:08,673
The pipe's interpreted the standard output as the "rev"'s standard input

16
00:01:08,673 --> 00:01:10,856
and the "rev" has done its job.

17
00:01:10,856 --> 00:01:15,085
However, if I do this on a file that doesn't exist...

18
00:01:16,735 --> 00:01:19,942
cat will display the error on the standard error channel,

19
00:01:19,942 --> 00:01:24,730
"rev" won't read from this error channel, as it only reads from the standard output,

20
00:01:24,730 --> 00:01:31,165
which is now its standard input, so the message won't be displayed.

21
00:01:31,165 --> 00:01:35,725
It can be interesting. Or not.

22
00:01:35,745 --> 00:01:42,026
You may also reverse the error message if you want.

23
00:01:42,046 --> 00:01:46,009
How? By adding more redirections,

24
00:01:46,009 --> 00:01:50,067
If we want to redirect the standard error channel's message, and handle it

25
00:01:50,067 --> 00:01:54,697
as if it was a standard output, we'll do this...

26
00:01:54,697 --> 00:01:57,439
So 2 represents the standard error's output.

27
00:01:57,439 --> 00:02:05,188
the 1 represents the standard output. We tell it that everything there is on

28
00:02:05,188 --> 00:02:08,073
the standard error channel has to be treated as if it was a standard output.

29
00:02:08,073 --> 00:02:12,828
So, if we add " | rev ", we can see the message is in reverse.

30
00:02:12,828 --> 00:02:15,964
Because it's been treated like a standard output.

31
00:02:18,310 --> 00:02:22,790
Identically, we can redirect everything that's in the standard error channel (2)

32
00:02:22,790 --> 00:02:29,520
into a file.

33
00:02:30,096 --> 00:02:34,975
For example, if I do this ... I'm asking 2 to be redirected into "error"

34
00:02:34,975 --> 00:02:37,093
and keep everything that's in "error".

35
00:02:37,093 --> 00:02:39,686
we can see our earlier error message

36
00:02:39,686 --> 00:02:42,519
And once again, if we do this 2-3 times in a row,

37
00:02:43,729 --> 00:02:48,737
it's only displayed once, because it's been overwritten and there's a double redirection,

38
00:02:48,737 --> 00:02:54,195
which will allow you to place your error messages at the end of the file.

39
00:02:55,812 --> 00:03:01,514
All of this can be quite practical if you have a list of files containing

40
00:03:02,764 --> 00:03:08,228
error messages, but you want to keep only the part that worked

41
00:03:08,228 --> 00:03:13,019
or only the part that didn't work, etc...

42
00:03:13,020 --> 00:03:17,997
Thanks to those redirections, you'll be able to gather all erroneous files

43
00:03:17,997 --> 00:03:22,085
into one error file.

44
00:03:22,775 --> 00:03:26,774
Something else, that may be useful... a very special file ...

45
00:03:26,774 --> 00:03:30,336
that isn't really a file, but oh well... It's called "/dev/null"

46
00:03:30,336 --> 00:03:38,260
What is it? Basically, everything that's written

47
00:03:38,260 --> 00:03:42,810
towards "/dev/null" will simply be erased. Forgotten.

48
00:03:42,810 --> 00:03:45,919
So here, nothing's gonna happen. The "/dev/null" file doesn't really exist.

49
00:03:45,919 --> 00:03:48,805
So nothing's been added to it. Whatever.

50
00:03:48,805 --> 00:03:55,114
So what can we use it for? We can use it to delete a part,

51
00:03:55,114 --> 00:03:56,607
and keep only error messages, for example.

52
00:03:56,623 --> 00:03:59,695
If we want to display all error messages,

53
00:04:00,311 --> 00:04:03,880
it's a real mess. You need to go back up, check, and stuff...

54
00:04:04,500 --> 00:04:08,585
If we tell it "everything worked, redirect this towards /dev/null" ...

55
00:04:08,585 --> 00:04:11,920
and there you go! Displaying only error messages.

56
00:04:11,926 --> 00:04:14,710
So once again, this may be very practical for debugging

57
00:04:14,710 --> 00:04:17,506
or check whether your scripts work as they should.

58
00:04:18,495 --> 00:04:21,784
That's something very important to know for the future.
