1
00:00:06,118 --> 00:00:09,147
Let's check out a few new commands that'll be very practical

2
00:00:09,440 --> 00:00:10,936
and simple too.

3
00:00:10,936 --> 00:00:13,027
We won't go into to much detail.

4
00:00:13,027 --> 00:00:15,628
The first command is called "wc"

5
00:00:15,628 --> 00:00:18,295
it simply calculates the number of lines,

6
00:00:18,295 --> 00:00:19,650
characters, and words

7
00:00:19,650 --> 00:00:20,855
within a file.

8
00:00:20,855 --> 00:00:23,000
So if I take our example file,

9
00:00:23,000 --> 00:00:25,933
and do a "wc" on it,

10
00:00:25,933 --> 00:00:28,162
we can see there are 400 lines, 405 words

11
00:00:28,162 --> 00:00:30,137
and 7446 characters in it.

12
00:00:30,626 --> 00:00:33,873
"wc" can take more than one file as a parameter.

13
00:00:34,156 --> 00:00:37,121
so doing "wc *" will give me the total

14
00:00:37,121 --> 00:00:39,200
number of lines, words and characters

15
00:00:39,200 --> 00:00:40,758
for all files in the directory.

16
00:00:41,913 --> 00:00:43,253
This command,

17
00:00:43,253 --> 00:00:45,430
just like any other commands we've seen

18
00:00:45,430 --> 00:00:47,137
can read on the standard input.

19
00:00:47,137 --> 00:00:49,803
So if I do "cat" on our file,

20
00:00:49,803 --> 00:00:54,169
and retrieve the number of Thomas

21
00:00:54,169 --> 00:00:57,384
and then redirect it with "wc -l" to get

22
00:00:57,404 --> 00:00:58,880
only the number of lines...

23
00:00:58,880 --> 00:01:00,779
I can see that there are 7 Thomas

24
00:01:00,779 --> 00:01:02,293
in the database.

25
00:01:02,293 --> 00:01:04,128
It's quite practical for counting results.

26
00:01:05,501 --> 00:01:07,540
Another basic command

27
00:01:07,540 --> 00:01:08,597
the command "file"

28
00:01:08,597 --> 00:01:10,239
"file" will simply give us info

29
00:01:10,239 --> 00:01:13,610
on a file passed as a parameter.

30
00:01:13,897 --> 00:01:16,390
Here we can see that this file is in UFT-8

31
00:01:16,448 --> 00:01:20,564
and that it's a text file

32
00:01:20,564 --> 00:01:23,346
so it's got a mime-type that corresponds to text

33
00:01:23,346 --> 00:01:25,332
we can see it's 'magic', etc...

34
00:01:26,708 --> 00:01:28,722
Another command: "ifconfig"

35
00:01:28,722 --> 00:01:32,318
which gives info on your network.

36
00:01:32,318 --> 00:01:33,907
With "ifconfig" you can display your IP

37
00:01:33,907 --> 00:01:36,402
and your MAC addresses, etc...

38
00:01:37,368 --> 00:01:40,409
Last simple command (more or less)

39
00:01:41,489 --> 00:01:44,124
The "bc" command.

40
00:01:44,124 --> 00:01:47,314
"bc" is very simple, it's a calculator.

41
00:01:47,633 --> 00:01:51,030
So if you type 2 + 3, it'll return 5.

42
00:01:52,521 --> 00:01:56,572
However, "bc" is very powerful ! It can run scientific calculations,

43
00:01:56,860 --> 00:02:01,003
such as sine, cosine, exponents, powers etc...

44
00:02:01,148 --> 00:02:06,123
It can convert number bases: start with a base-two, and

45
00:02:06,235 --> 00:02:07,857
return the result in base 16, etc.

46
00:02:07,857 --> 00:02:11,045
So "bc" is quite practical, and on top of that

47
00:02:11,045 --> 00:02:14,171
it reads from the standard input,

48
00:02:14,171 --> 00:02:16,507
so if I do "echo 1 + 2"

49
00:02:19,067 --> 00:02:21,531
and pipe it in "bc"

50
00:02:21,531 --> 00:02:23,280
it'll return 3.

51
00:02:23,280 --> 00:02:26,608
Let's say I want to calculate the number of lines,

52
00:02:26,608 --> 00:02:28,560
or something like that,

53
00:02:28,560 --> 00:02:32,378
"bc" allows me to do so.

54
00:02:32,378 --> 00:02:35,322
The last command we'll see in this video,

55
00:02:35,322 --> 00:02:38,842
is slightly more complicated, but not that hard.

56
00:02:38,842 --> 00:02:43,160
The command "find"

57
00:02:43,160 --> 00:02:46,276
By default, "find" lists all files within a directory

58
00:02:46,276 --> 00:02:48,079
passed as an argument.

59
00:02:49,319 --> 00:02:50,848
So if we do "find ."

60
00:02:50,848 --> 00:02:53,783
It'll list all files present in the current directory.

61
00:02:54,213 --> 00:02:56,542
If we do "find /usr",

62
00:02:56,542 --> 00:02:59,059
it'll list all files in /usr.

63
00:02:59,089 --> 00:03:01,616
Please not it searches recursively

64
00:03:01,616 --> 00:03:04,721
so it also goes through sub-directories.

65
00:03:04,981 --> 00:03:07,689
"find" is powerful, because it allows us

66
00:03:07,689 --> 00:03:09,066
to filter files we want.

67
00:03:09,356 --> 00:03:11,915
Simple filtering example : Filter by name.

68
00:03:11,915 --> 00:03:14,846
let's say I want all files starting by "ls"...

69
00:03:15,842 --> 00:03:18,713
we can see it returns all related files.

70
00:03:18,943 --> 00:03:21,398
We can also filter by last modification date,

71
00:03:21,398 --> 00:03:23,578
filter by size,

72
00:03:23,578 --> 00:03:27,937
filter depending on whether it's a file, a directory or an executeable

73
00:03:28,838 --> 00:03:32,544
It also allows you to perform actions on files...

74
00:03:32,684 --> 00:03:34,962
we can display them, delete them,

75
00:03:35,052 --> 00:03:39,208
or even run other commands.

76
00:03:40,748 --> 00:03:47,125
If you want to know more about its capabilities, read its "man",

77
00:03:47,125 --> 00:03:51,602
look it up on the internet, check how people use it,

78
00:03:51,602 --> 00:03:54,897
possibilities are endless.

79
00:03:56,427 --> 00:03:58,294
Last thing I'd like us to see...

80
00:03:58,704 --> 00:03:59,988
The Environment.

81
00:04:00,068 --> 00:04:01,218
What is it?

82
00:04:01,388 --> 00:04:05,476
It's simply a list of variables in Shell, that'll be automatically sent

83
00:04:05,516 --> 00:04:08,683
to all your binaries and scripts.

84
00:04:10,193 --> 00:04:13,530
So if we do "env", it'll display the list of variables.

85
00:04:13,530 --> 00:04:18,841
We can see that it works by a key/value system. So PATH has all this value.

86
00:04:19,921 --> 00:04:23,913
PATH can be used to tell the Shell where to look for binaries.

87
00:04:23,913 --> 00:04:29,215
Here you can see that the user is called "bocal"

88
00:04:29,215 --> 00:04:32,678
You can see the terminal used, here it's xTerm, etc...

89
00:04:33,608 --> 00:04:34,868
So what's it good for?

90
00:04:34,868 --> 00:04:38,756
You can use it to configure your Shell scripts.

91
00:04:39,370 --> 00:04:46,330
Let's say we want to add a variable LINE, corresponding to the line number

92
00:04:46,330 --> 00:04:51,535
the script seeks, We can do LINE = 3.

93
00:04:52,615 --> 00:04:57,215
If we look at then environment, the LINE variable has been created with a value of 3.

94
00:04:58,295 --> 00:05:01,475
if you want to access it, just type "$LINE".

95
00:05:01,985 --> 00:05:07,328
If we do an "echo" of the "$LINE" variable, 3 will be displayed...

96
00:05:07,328 --> 00:05:12,330
because $LINE will simply get replaced by its value.

97
00:05:12,689 --> 00:05:17,483
So those variables should allow you to configure your Shell scripts,

98
00:05:17,483 --> 00:05:20,961
and later on, help you configure what we call Makefiles

99
00:05:20,961 --> 00:05:24,360
to change behaviors depending on environment variables.
