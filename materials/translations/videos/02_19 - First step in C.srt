1
00:00:06,110 --> 00:00:09,220
Hello and welcome to this first day of C : day 02.

2
00:00:09,440 --> 00:00:12,900
I'm going to show you how to write your first program in C,

3
00:00:12,900 --> 00:00:16,020
and how to compile it so that it can be executed by the machine.

4
00:00:16,020 --> 00:00:20,550
First, let's open the file "jour02.c" with emacs

5
00:00:20,740 --> 00:00:26,320
The ".c" extension lets us (and the machine) know it's a source file.

6
00:00:27,750 --> 00:00:31,790
As soon as you open (or create) a file.c with emacs,

7
00:00:31,860 --> 00:00:38,563
use Ctrl-C and Ctrl-H to generate the school Header.

8
00:00:39,073 --> 00:00:41,913
If you're using vim, you'll have to use Fn-F1.

9
00:00:43,190 --> 00:00:48,180
We'll start by declaring our program's entry point with the function main().

10
00:00:48,230 --> 00:00:53,863
In C, all functions have a type (int, char, etc..)

11
00:00:53,863 --> 00:00:56,863
they return a value of that type whenever they are used.

12
00:00:56,863 --> 00:01:01,533
So here we're going to create the main() function, which returns an int.

13
00:01:01,533 --> 00:01:07,562
If your function doesn't return anything, you'll have to write "void" (= null).

14
00:01:07,562 --> 00:01:11,692
No variable means nothing to return.

15
00:01:11,692 --> 00:01:16,649
As our function main() returns an int, let's write the return right now.

16
00:01:16,669 --> 00:01:21,029
Assuming there was no error in our code, we'll use the default return code:

17
00:01:21,199 --> 00:01:26,107
return(0) The "0" indicates everything went well.

18
00:01:26,787 --> 00:01:32,267
Normally, main() takes arguments, but for your first program, we won't.

19
00:01:32,657 --> 00:01:36,547
Here we go. We created a function that does nothing but return 0.

20
00:01:36,917 --> 00:01:38,957
Just saying "everything went fine".

21
00:01:39,047 --> 00:01:41,727
Let's save our file with Ctrl-X Ctrl-S,

22
00:01:41,847 --> 00:01:44,542
with Ctrl-Z, emacs will run in the background.

23
00:01:44,542 --> 00:01:47,542
You can see in the Shell that the task was suspended.

24
00:01:47,542 --> 00:01:52,542
Now, let's compile our file with gcc, which is the compiler.

25
00:01:53,132 --> 00:01:55,763
gcc has several options,

26
00:01:55,763 --> 00:02:02,363
for instance -o which allows us to define the type of gcc output file,

27
00:02:02,363 --> 00:02:05,093
meaning the name of the executable we've created.

28
00:02:05,173 --> 00:02:13,027
So let's create an executable called "jour02", using the source file "jour02.c"

29
00:02:13,087 --> 00:02:23,347
Be careful not to mix them up, otherwise you'll overwrite "jour02.c"

30
00:02:23,487 --> 00:02:28,927
There we go! gcc has created our file.

31
00:02:29,897 --> 00:02:33,877
See in our directory we now have 2 files : "jour02" and "jour02.c"

32
00:02:34,723 --> 00:02:40,561
We now have the executable (see files' access rights)

33
00:02:40,681 --> 00:02:45,601
to make sure we're executing it in the current directory, we'll use "./"

34
00:02:45,601 --> 00:02:47,220
before our executable's name.

35
00:02:48,199 --> 00:02:53,089
That launches our program, but as it doesn't do anything, there's no output.

36
00:02:54,099 --> 00:02:56,295
So let's make it do something.

37
00:02:57,475 --> 00:03:01,085
With "fg" (foreground) we reopen emacs.

38
00:03:03,365 --> 00:03:07,357
Let's use a basic system call : write().

39
00:03:07,697 --> 00:03:12,057
So, if you remember (or not), we'll use write() on the standard output,

40
00:03:12,057 --> 00:03:15,057
which is the File Descriptor (1)

41
00:03:15,057 --> 00:03:18,520
We'll just display one character, for instance "@",

42
00:03:19,360 --> 00:03:25,355
and specify how many characters we want to display from this string,

43
00:03:25,905 --> 00:03:27,865
so here, just one.

44
00:03:28,735 --> 00:03:35,412
Let's quickly check out write()'s man, we can do this simply by doing Meta-X man...

45
00:03:35,812 --> 00:03:42,121
... we'll look at the man 2 write(). write() is a system call.

46
00:03:42,121 --> 00:03:45,121
mans are indexed by type, and man 2 is about system calls.

47
00:03:45,121 --> 00:03:48,341
so we want to type "man 2 write".

48
00:03:49,901 --> 00:03:55,944
It splits our window into two. To switch windows, just do Ctrl-X-O.

49
00:03:57,240 --> 00:04:05,560
As you can see, write() requires the header "#include <unistd.h>"

50
00:04:05,730 --> 00:04:14,796
so that the compiler has the declaration and knows what arguments are required

51
00:04:15,576 --> 00:04:22,343
and what the output parameter is.

52
00:04:22,343 --> 00:04:25,223
So let's add this header.

53
00:04:25,953 --> 00:04:29,073
Stil Ctrl-X-O to switch windows.

54
00:04:29,703 --> 00:04:34,417
We can see that write() requires a file descriptor,

55
00:04:34,417 --> 00:04:37,937
- The (1) that represents our program's standard output -

56
00:04:37,937 --> 00:04:42,397
a buffer - which is a string. In our case just "@",

57
00:04:42,794 --> 00:04:47,724
and a size - number of bites to be displayed -

58
00:04:49,184 --> 00:04:55,166
Save your modifications (Ctrl-X, Ctrl-S), suspend emacs (Ctrl-Z)

59
00:04:55,626 --> 00:04:58,686
Re-compile.

60
00:05:00,446 --> 00:05:01,956
Everything went fine.

61
00:05:02,416 --> 00:05:10,146
Launch your program. "@" is being displayed on-screen.

62
00:05:10,576 --> 00:05:14,166
Why is there a "%" at the end ?

63
00:05:18,090 --> 00:05:20,680
Because there's no carriage return in our program.

64
00:05:20,680 --> 00:05:25,090
So let's add one ("\n") and change the size of our string to 2 characters.

65
00:05:28,710 --> 00:05:31,330
Re-compiling, re-launching...

66
00:05:31,640 --> 00:05:33,640
That's better!

67
00:05:33,740 --> 00:05:39,350
Now that we're created our first function, let's move it to a sub-function,

68
00:05:40,480 --> 00:05:45,013
which we'll call ft_putchar(),

69
00:05:46,663 --> 00:05:50,033
which will also return an int.

70
00:05:52,683 --> 00:06:04,563
So, ft_putchar() will take a "char c" and we'll simply take the write()

71
00:06:04,623 --> 00:06:09,165
from the main() and move it up.

72
00:06:09,255 --> 00:06:12,945
Cut the line with Ctrl-K. Do it twice to get the carriage return too

73
00:06:12,945 --> 00:06:14,725
Paste with Ctrl-Y

74
00:06:14,785 --> 00:06:22,398
and in our sub-function we'll be able to write the character...

75
00:06:23,278 --> 00:06:27,632
... It's a little complicated,...

76
00:06:27,632 --> 00:06:30,202
with the ampersand "&" we give a character's address,

77
00:06:30,202 --> 00:06:32,012
instead of the character itself,

78
00:06:32,012 --> 00:06:38,062
which allows us to transform it into a string (char *)

79
00:06:42,422 --> 00:06:45,542
Here, we can either return(0), which means everything went well,

80
00:06:45,602 --> 00:06:52,892
either change the function's type to void (returns nothing). Let's use return(0).

81
00:06:53,783 --> 00:06:58,163
We're going to use our function ft_putchar()

82
00:06:58,533 --> 00:07:06,784
and this time we'll use simple quotes because it's a character, not a string.

83
00:07:07,514 --> 00:07:13,224
We're going to do a second time for the "\n".

84
00:07:20,589 --> 00:07:24,259
Let's close the man window with Ctrl-X-1.

85
00:07:24,439 --> 00:07:29,005
As you can see, our program will start its execution from the main()

86
00:07:29,325 --> 00:07:34,305
The main() calls the sub-function ft_putchar().

87
00:07:34,565 --> 00:07:39,645
ft_putchar() displays what we put as parameter in the "char c".

88
00:07:41,025 --> 00:07:44,915
It returns, then we're back to the point of execution at the end of this function.

89
00:07:44,915 --> 00:07:46,785
Then we carry on.

90
00:07:49,265 --> 00:07:55,157
And then we end up with a ft_putchar() of a line-break ("\n").

91
00:07:55,217 --> 00:08:00,007
in this case, write(1 ... ), the "char c" becomes "\n",

92
00:08:00,007 --> 00:08:02,717
it's one character, so 1. We return, and we're done.

93
00:08:03,781 --> 00:08:07,191
Let's test this. Ctrl-X Ctrl-S save our program.

94
00:08:09,241 --> 00:08:11,631
Re-compiling

95
00:08:12,001 --> 00:08:13,761
launching

96
00:08:14,855 --> 00:08:16,875
It did what we wanted.

97
00:08:17,635 --> 00:08:23,465
Now. Let's try something a little more complex.

98
00:08:23,525 --> 00:08:30,694
Let's create a function that displays N-times the character passed as argument.

99
00:08:33,683 --> 00:08:36,494
Let's call it ft_nputchar().

100
00:08:40,655 --> 00:08:45,522
So we need the character we want to be displayed,

101
00:08:45,522 --> 00:08:51,442
and an int(n) for the number of times we want that character displayed.

102
00:08:51,442 --> 00:08:57,422
Here, we'll simply use this int(n) to count.

103
00:08:57,532 --> 00:09:02,658
We could modify it the hard way, but let's try and keep it simple for now.

104
00:09:02,768 --> 00:09:06,838
We need a counter "i", which will start from 0.

105
00:09:06,898 --> 00:09:13,486
And we're going to add a loop with while() - while (i) is smaller than (n) ...

106
00:09:13,638 --> 00:09:17,518
while (i < n) { ... } ,

107
00:09:17,726 --> 00:09:22,921
we'll display the character -

108
00:09:26,061 --> 00:09:28,961
by calling our ft_putchar() function

109
00:09:30,921 --> 00:09:34,722
and as long as it's lower than (n), we'll increase (i)

110
00:09:35,522 --> 00:09:37,322
i = i + 1;

111
00:09:37,442 --> 00:09:42,002
and once (i) is equal to (n), it'll stop.

112
00:09:42,072 --> 00:09:47,750
So if we say that the argument (n) is equal to (1),

113
00:09:47,820 --> 00:09:50,610
we start with (i), which equals to (0), therefore smaller than (1),

114
00:09:50,610 --> 00:09:53,610
starting our first loop.

115
00:09:53,610 --> 00:09:56,840
we increase (i) by (1). So (i) goes from (0) to (1).

116
00:09:56,920 --> 00:10:04,661
The loop starts over again. As (i) isn't lower than (1), the expression is wrong,

117
00:10:04,721 --> 00:10:09,542
so we exit our loop while() and return (0)

118
00:10:12,172 --> 00:10:21,208
So we'll try the same thing... Here we'll call ft_nputchar(), and ask it to display

119
00:10:21,718 --> 00:10:24,668
42 times the character "@" followed by a line-break.

120
00:10:25,868 --> 00:10:28,352
Ctrl-Z, emacs runs in the background.

121
00:10:28,532 --> 00:10:32,592
Re-compiling

122
00:10:33,092 --> 00:10:34,782
Launching.

123
00:10:34,852 --> 00:10:37,512
Okay. Let's check.

124
00:10:39,487 --> 00:10:43,381
Normally we should have 43 characters, because the "\n" counts as a character too

125
00:10:43,381 --> 00:10:45,821
Here we go. We have 43 characters!

126
00:10:46,641 --> 00:10:52,930
With these simple examples, you should be able to write your own programs in C

127
00:10:53,020 --> 00:10:55,160
Up to you to do the rest !

128
00:10:55,300 --> 00:10:56,790
Cheers!
